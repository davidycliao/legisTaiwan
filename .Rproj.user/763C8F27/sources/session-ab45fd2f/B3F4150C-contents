---
title: "Fetching Parliarmentary Questions"
author: ""
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Fetching Parliarmentary Questions}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```


```{r include=FALSE}
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
library(legisTaiwan)
```

## Accessing Parliamentary Questions with legisTaiwan Package
<div class="text-justify">

This tutorial demonstrates how to use the legisTaiwan package to access parliamentary questions and executive responses from Taiwan's Legislative Yuan. The package provides convenient functions to fetch publicly available data.
</div>
</div>

### Loading the Package
First, install and load the legisTaiwan package:
```{r}
library(legisTaiwan)
```

### Fetching Parliamentary Questions

<div class="text-justify">

Use the `get_parlquestions()` function to retrieve parliamentary questions from legislators:

</div>

```{r}
# Fetch questions from the 11th term
pa_term10 <- get_parlquestions(term = 11, verbose = TRUE)

# Examine the data structure
str(pa_term10)
```

__Function parameters:__

- `term`: Legislative term (must be numeric, e.g., 11)
- `session_period`: Session period (optional)
- `verbose = TRUE`: Display download progress and information

__The returned data contains:__

- `title`: Data title
- `query_time`: Query timestamp
`_retrieved_number`: Number of records retrieved
- `data`: A dataframe containing:
  + term: Legislative term
  + sessionPeriod: Session period
  + sessionTimes: Session count
  + item: Question items

<!-- ```{r} -->
<!-- library(jiebaR) -->
<!-- pacman::p_load(tidyverse, readxl, lubridate, data.table,       -->
<!--                parallel, future, furrr, future.apply,         # Parallel Computing -->
<!--                doParallel, foreach, doFuture, cowplot,        # Computing & Plot -->
<!--                ggplot2, ggpubr, ggrepel, ggraph,              # Visualization  -->
<!--                igraph, ggforce, ggridges, ggthemes,            -->
<!--                geomtextpath, Cairo, lattice, showtext,         -->
<!--                fixest, marginaleffects, zoo, gt,              # Stats & Tables -->
<!--                quanteda, quanteda.textplots, jiebaR,          # Text Analysis  -->
<!--                udpipe, textrank, quanteda.textstats,          # NLP Tools -->
<!--                colorspace)                                    # Color -->
<!-- # parallel -->


<!-- # CHINESE TOKENIZATION  -->
<!-- pa_term10$data$item -->
<!-- segment_text <- function(i) {jiebaR::segment(code = i,  -->
<!--                                             jiebar = jiebaR::worker())} -->

<!-- cl <- makeCluster(detectCores()-1) -->
<!-- clusterExport(cl, varlist = ls(), envir = globalenv()) -->
<!-- press.seg <- parLapply(cl, pa_term10$data$item , segment_text, chunk.size = 6 ) -->
<!-- stopCluster(cl) -->

<!-- batch_size <- 20  # 每批處理500筆 -->

<!-- # 檢查檔案權限 -->
<!-- stopwords_path <- file.path("data", "stopwords.txt") -->

<!-- file.info(stopwords_path) -->
<!-- file.info(userdict_path) -->

<!-- # 5. 分批處理 -->
<!-- n_batches <- ceiling(nrow(merged_seg_dt) / batch_size) -->
<!-- result_list <- vector("list", n_batches) -->

<!-- for(i in 1:n_batches) { -->
<!--   # 計算批次的開始和結束索引 -->
<!--   start_idx <- (i-1) * batch_size + 1 -->
<!--   end_idx <- min(i * batch_size, nrow(merged_seg_dt)) -->

<!--   # 處理當前批次 -->
<!--   cat(sprintf("Processing batch %d/%d...\n", i, n_batches)) -->
<!--   batch_dt <- merged_seg_dt[start_idx:end_idx] -->
<!--   result_list[[i]] <- process_batch(batch_dt) -->

<!--   # 強制進行垃圾回收 -->
<!--   gc() -->
<!-- } -->

<!-- result_dt <- rbindlist(result_list) -->
<!-- cat("\n基本統計：\n") -->
<!-- cat("總處理文本數：", nrow(result_dt), "\n") -->
<!-- cat("成功分詞數量：", sum(sapply(result_dt$segmented_text, length) > 0), "\n") -->

<!-- # 8. 顯示各屆次統計 -->
<!-- cat("\n各屆次的文本數量：\n") -->
<!-- print(table(result_dt$term)) -->

<!-- ``` -->

### Retrieving Executive Responses
Use the get_executive_response() function to fetch responses from the Executive Yuan:

```{r}
# Fetch executive responses from the 10th term, 2nd session
exec_response <- get_executive_response(term = 10, session_period = 2, verbose = TRUE)

# Examine the data structure
head(exec_response$data)
```

__Function parameters:__

- `term`: Legislative term
- `session_period`: Session period
- `verbose = TRUE`: Display download progress and information

__The returned data includes:__

- `title`: Data title
- `query_time`: Query timestamp
- `retrieved_number`: Number of records retrieved
- `data`: A dataframe containing response information
