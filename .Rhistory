}
url <- sprintf("https://npl.ly.gov.tw/do/www/appDate?status=0&expire=%02d&startYear=0",
as.numeric(term))
# 使用系統curl下載頁面
temp_file <- tempfile(fileext = ".html")
使用系統curl下載頁面
temp_file
on.exit(unlink(temp_file), add = TRUE)  # 確保退出時刪除臨時文件
download_command <- sprintf('curl --insecure --max-time 30 --retry 3 "%s" -o "%s"', url, temp_file)
download_command
# 執行系統命令
message("Downloading data from Legislative Yuan website...")
result <- suppressWarnings(system(download_command, intern = TRUE))
result
# 檢查文件是否下載成功
if (!file.exists(temp_file) || file.size(temp_file) == 0) {
stop("Failed to download the HTML content. The website might be down.")
}
# 讀取和解析HTML
html_content <- xml2::read_html(temp_file)
html_content
html_ <- rvest::html_nodes(html_content, "*[class='section_wrapper']")
html_
# 提取標題
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
# 提取行
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
# 處理數據
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
# 創建數據框
df <- do.call(rbind, data)
colnames(df) <- title
df
#'
#' @seealso
#' Regarding Minguo calendar, please see \url{https://en.wikipedia.org/wiki/Republic_of_China_calendar}.
#'
#' @examples
#' # Show the session information for the 7th Legislative Yuan term periods in ROC calendar year
#' \dontrun{
#' review_session_info(7)
#' }
#' @export
term <-11
if (length(curl_available) == 0) {
stop("The 'curl' command is not available on your system. Please install curl or use the RSelenium method.")
}
# 構建URL
url <- sprintf("https://npl.ly.gov.tw/do/www/appDate?status=0&expire=%02d&startYear=0",
as.numeric(term))
tryCatch({
# 使用系統curl下載頁面
temp_file <- tempfile(fileext = ".html")
on.exit(unlink(temp_file), add = TRUE)  # 確保退出時刪除臨時文件
# 構建curl命令，使用--insecure選項跳過SSL驗證
download_command <- sprintf('curl --insecure --max-time 30 --retry 3 "%s" -o "%s"', url, temp_file)
# 執行系統命令
message("Downloading data from Legislative Yuan website...")
result <- suppressWarnings(system(download_command, intern = TRUE))
# 檢查文件是否下載成功
if (!file.exists(temp_file) || file.size(temp_file) == 0) {
stop("Failed to download the HTML content. The website might be down.")
}
# 讀取和解析HTML
html_content <- xml2::read_html(temp_file)
html_ <- rvest::html_nodes(html_content, "*[class='section_wrapper']")
# 提取標題
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
# 提取行
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
# 處理數據
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
# 創建數據框
df <- do.call(rbind, data)
colnames(df) <- title
# 清理日期欄位中的JavaScript代碼
if ("會議起迄日" %in% colnames(df)) {
df$會議起迄日 <- gsub("~.*document\\.write.*$", "~", df$會議起迄日)
}
# 確保按會期編號排序
if ("屆期會期" %in% colnames(df)) {
# 提取會期數字
session_numbers <- as.numeric(gsub(".*第([0-9]+)會期$", "\\1", df$屆期會期))
# 按會期數字排序
df <- df[order(session_numbers), ]
}
message("Session information retrieved successfully.")
return(tibble::as_tibble(df))
},
error = function(e) {
stop(paste("Error retrieving session information:", e$message))
})
#'
#' @seealso
#' Regarding Minguo calendar, please see \url{https://en.wikipedia.org/wiki/Republic_of_China_calendar}.
#'
#' @examples
#' # Show the session information for the 7th Legislative Yuan term periods in ROC calendar year
#' \dontrun{
#' review_session_info(7)
#' }
#' @export
term <- 11
review_session_info <- function(term) {
# 輸入驗證
if(missing(term)) {
stop("Term parameter is required")
}
attempt::stop_if(term, is.null,
msg = "Term cannot be NULL. Please provide a valid term number (1-11).")
attempt::stop_if_not(term %in% 1:11,
msg = paste("Invalid term:", term,
"\nPlease provide a term number between 1 and 11."))
# 檢查curl是否可用
curl_available <- system("which curl", intern = TRUE, ignore.stderr = TRUE)
if (length(curl_available) == 0) {
stop("The 'curl' command is not available on your system. Please install curl or use the RSelenium method.")
}
# 構建URL
url <- sprintf("https://npl.ly.gov.tw/do/www/appDate?status=0&expire=%02d&startYear=0",
as.numeric(term))
tryCatch({
# 使用系統curl下載頁面
temp_file <- tempfile(fileext = ".html")
on.exit(unlink(temp_file), add = TRUE)  # 確保退出時刪除臨時文件
# 構建curl命令，使用--insecure選項跳過SSL驗證
download_command <- sprintf('curl --insecure --max-time 30 --retry 3 "%s" -o "%s"', url, temp_file)
# 執行系統命令
message("Downloading data from Legislative Yuan website...")
result <- suppressWarnings(system(download_command, intern = TRUE))
# 檢查文件是否下載成功
if (!file.exists(temp_file) || file.size(temp_file) == 0) {
stop("Failed to download the HTML content. The website might be down.")
}
# 讀取和解析HTML
html_content <- xml2::read_html(temp_file)
html_ <- rvest::html_nodes(html_content, "*[class='section_wrapper']")
# 提取標題
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
# 提取行
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
# 處理數據
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
# 創建數據框
df <- do.call(rbind, data)
colnames(df) <- title
# 確保 df 是數據框
df <- as.data.frame(df, stringsAsFactors = FALSE)
# 清理日期欄位中的JavaScript代碼
col_index <- which(colnames(df) == "會議起迄日")
if (length(col_index) > 0) {
df[, col_index] <- gsub("~if\\(.*\\).*", "~", df[, col_index])
}
# 確保按會期編號排序
col_index <- which(colnames(df) == "屆期會期")
if (length(col_index) > 0) {
# 提取會期數字
session_numbers <- as.numeric(gsub(".*第([0-9]+)會期$", "\\1", df[, col_index]))
# 按會期數字排序
df <- df[order(session_numbers), ]
}
message("Session information retrieved successfully.")
return(tibble::as_tibble(df))
},
error = function(e) {
stop(paste("Error retrieving session information:", e$message))
})
}
# 構建URL
url <- sprintf("https://npl.ly.gov.tw/do/www/appDate?status=0&expire=%02d&startYear=0",
as.numeric(term))
tryCatch({
# 使用系統curl下載頁面
temp_file <- tempfile(fileext = ".html")
on.exit(unlink(temp_file), add = TRUE)  # 確保退出時刪除臨時文件
# 構建curl命令，使用--insecure選項跳過SSL驗證
download_command <- sprintf('curl --insecure --max-time 30 --retry 3 "%s" -o "%s"', url, temp_file)
# 執行系統命令
message("Downloading data from Legislative Yuan website...")
result <- suppressWarnings(system(download_command, intern = TRUE))
# 檢查文件是否下載成功
if (!file.exists(temp_file) || file.size(temp_file) == 0) {
stop("Failed to download the HTML content. The website might be down.")
}
# 讀取和解析HTML
html_content <- xml2::read_html(temp_file)
html_ <- rvest::html_nodes(html_content, "*[class='section_wrapper']")
# 提取標題
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
# 提取行
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
# 處理數據
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
# 創建數據框
df <- do.call(rbind, data)
colnames(df) <- title
# 確保 df 是數據框
df <- as.data.frame(df, stringsAsFactors = FALSE)
# 清理日期欄位中的JavaScript代碼
col_index <- which(colnames(df) == "會議起迄日")
if (length(col_index) > 0) {
df[, col_index] <- gsub("~if\\(.*\\).*", "~", df[, col_index])
}
# 確保按會期編號排序
col_index <- which(colnames(df) == "屆期會期")
if (length(col_index) > 0) {
# 提取會期數字
session_numbers <- as.numeric(gsub(".*第([0-9]+)會期$", "\\1", df[, col_index]))
# 按會期數字排序
df <- df[order(session_numbers), ]
}
message("Session information retrieved successfully.")
return(tibble::as_tibble(df))
},
error = function(e) {
stop(paste("Error retrieving session information:", e$message))
})
message("Downloading data from Legislative Yuan website...")
result
temp_file <- tempfile(fileext = ".html")
url <- sprintf("https://npl.ly.gov.tw/do/www/appDate?status=0&expire=%02d&startYear=0",
as.numeric(term))
temp_file <- tempfile(fileext = ".html")
on.exit(unlink(temp_file), add = TRUE)  # 確保退出時刪除臨時文件
# 構建curl命令，使用--insecure選項跳過SSL驗證
download_command <- sprintf('curl --insecure --max-time 30 --retry 3 "%s" -o "%s"', url, temp_file)
# 執行系統命令
message("Downloading data from Legislative Yuan website...")
result <- suppressWarnings(system(download_command, intern = TRUE))
result
download_command
html_content <- xml2::read_html(temp_file)
html_content
html_ <- rvest::html_nodes(html_content, "*[class='section_wrapper']")
html_
# 提取標題
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
title
# 提取行
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
odd_rows
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
even_rows
# 處理數據
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
data
# 創建數據框
df <- do.call(rbind, data)
df
colnames(df) <- title
df
# 清理日期欄位中的JavaScript代碼
col_index <- which(colnames(df) == "會議起迄日")
# 清理日期欄位中的JavaScript代碼
col_index <- which(colnames(df) == "會議起迄日")
col_index
if (length(col_index) > 0) {
df[, col_index] <- gsub("~if\\(.*\\).*", "~", df[, col_index])
}
df
# 確保按會期編號排序
col_index <- which(colnames(df) == "屆期會期")
if (length(col_index) > 0) {
# 提取會期數字
session_numbers <- as.numeric(gsub(".*第([0-9]+)會期$", "\\1", df[, col_index]))
# 按會期數字排序
df <- df[order(session_numbers), ]
}
df
roxygen2::roxygenise().
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
review_session_info(7)
review_session_info(7)
roxygen2::roxygenise()
# For review_session_info function
test_that("review_session_info works correctly", {
result <- review_session_info(7)
# Check if the function returns a tibble
expect_true(is(result, "tbl_df"))
# Check if the tibble contains specific column names (this depends on the actual column names)
expect_true("屆期會期" %in% colnames(result)) # Replace 'ColumnName1' with actual column name
# Check if passing an invalid term value results in an error
# expect_error(review_session_info(12), "use correct `term`.")
})
library(testthat)
# For review_session_info function
test_that("review_session_info works correctly", {
result <- review_session_info(7)
# Check if the function returns a tibble
expect_true(is(result, "tbl_df"))
# Check if the tibble contains specific column names (this depends on the actual column names)
expect_true("屆期會期" %in% colnames(result)) # Replace 'ColumnName1' with actual column name
# Check if passing an invalid term value results in an error
# expect_error(review_session_info(12), "use correct `term`.")
})
result <- review_session_info(7)
result <- review_session_info(7)
tryCatch({
# Download page using system curl with --insecure to bypass SSL issues
temp_file <- tempfile(fileext = ".html")
on.exit(unlink(temp_file), add = TRUE)  # Ensure temporary file is deleted on exit
# Build curl command with options:
# --insecure: Skip SSL certificate verification
# --max-time: Set maximum time allowed for transfer
# --retry: Number of retries if transfer fails
download_command <- sprintf('curl --insecure --max-time 30 --retry 3 "%s" -o "%s"', url, temp_file)
# Execute system command
message("Downloading data from Legislative Yuan website...")
result <- suppressWarnings(system(download_command, intern = TRUE))
# Check if download was successful
if (!file.exists(temp_file) || file.size(temp_file) == 0) {
stop("Failed to download the HTML content. The website might be down.")
}
# Read and parse the HTML content
html_content <- xml2::read_html(temp_file)
html_ <- rvest::html_nodes(html_content, "*[class='section_wrapper']")
# Extract table headers
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
# Extract table rows (both odd and even rows)
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
# Process data by removing whitespace
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
# Create dataframe and set column names
df <- do.call(rbind, data)
colnames(df) <- title
# Ensure df is a proper dataframe
df <- as.data.frame(df, stringsAsFactors = FALSE)
# Clean JavaScript code from date field
# The date field often contains unwanted JavaScript that needs to be removed
col_index <- which(colnames(df) == "會議起迄日")
if (length(col_index) > 0) {
df[, col_index] <- gsub("~if\\(.*\\).*", "~", df[, col_index])
}
# Sort by session number to ensure proper ordering
col_index <- which(colnames(df) == "屆期會期")
if (length(col_index) > 0) {
# Extract session numbers using regex
# Add debugging to see what's being processed
session_titles <- df[, col_index]
# More robust regex that handles various session title formats
session_numbers <- rep(NA, length(session_titles))
for (i in seq_along(session_titles)) {
# Try to extract the session number
match_result <- regexpr("第([0-9]+)會期", session_titles[i])
if (match_result > 0) {
match_length <- attr(match_result, "match.length")
extracted_text <- substr(session_titles[i],
match_result + 1,
match_result + match_length - 3)
session_numbers[i] <- suppressWarnings(as.numeric(extracted_text))
}
}
# Check if we have any valid session numbers before sorting
if (any(!is.na(session_numbers))) {
# Create a sorting index that keeps NA values at the end
sort_index <- order(is.na(session_numbers), session_numbers)
df <- df[sort_index, ]
}
message("Session information retrieved successfully.")
return(tibble::as_tibble(df))
},
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
result <- review_session_info(7)
result
expect_true(is(result, "tbl_df"))
library(testthat)
# Check if the function returns a tibble
expect_true(is(result, "tbl_df"))
# Check if the tibble contains specific column names (this depends on the actual column names)
expect_true("屆期會期" %in% colnames(result)) # Replace 'ColumnName1' with actual column name
# Check if passing an invalid term value results in an error
expect_error(review_session_info(12), "use correct `term`.")
# Check if passing an invalid term value results in an error
expect_error(review_session_info(12), "Please provide a term number between 1 and 11.")
# For review_session_info function
test_that("review_session_info works correctly", {
result <- review_session_info(7)
# Check if the function returns a tibble
expect_true(is(result, "tbl_df"))
# Check if the tibble contains specific column names (this depends on the actual column names)
expect_true("屆期會期" %in% colnames(result)) # Replace 'ColumnName1' with actual column name
# Check if passing an invalid term value results in an error
expect_error(review_session_info(12), "Please provide a term number between 1 and 11.")
})
roxygen2::roxygenise().
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(pkgdown )
build_site()
library(covr)
# If run with no arguments implicitly calls `package_coverage()`
report()
build_site()
deploy_to_branch()
build_site()
deploy_to_branch()
build_site()
```{r, include = FALSE}
build_site()
build_site()
build_site()
pkgdown::preview_site(path='reference/get_bills_2.html')
2
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
deploy_to_branch()
library(pkgodwn)
library(pkgdown)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
deploy_to_branch()
build_site()
deploy_to_branch()
