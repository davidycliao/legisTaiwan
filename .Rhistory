legis_h <- get_bills(proposer = "黃仁",start_date = 1130201,end_date = 1131227, verbose = FALSE)
legis_c <- get_bills(proposer = "陳瑩",start_date = 1130201,end_date = 1131227, verbose = FALSE)
legis_l <- get_bills(proposer = "盧縣一",start_date = 1130201,end_date = 1131227, verbose = FALSE)
legis_l
legis_l$data
legis_c
legis_c
legis_w
get_bills_2
new <- get_bills_2(11)
new <- get_bills_2(11)
new$data
legis_w
k <- get_bills(proposer = "高金素梅",
start_date = 1130201,
end_date = 1131227,
verbose = FALSE)
w <- get_bills(proposer = "伍麗華",start_date = 1130201,end_date = 1131227, verbose = FALSE)
z <- get_bills(proposer = "鄭天財",start_date = 1130201,end_date = 1131227, verbose = FALSE)
h <- get_bills(proposer = "黃仁",start_date = 1130201,end_date = 1131227, verbose = FALSE)
c <- get_bills(proposer = "陳瑩",start_date = 1130201,end_date = 1131227, verbose = FALSE)
l <- get_bills(proposer = "盧縣一",start_date = 1130201,end_date = 1131227, verbose = FALSE)
k$data
rbin(k$data$billName)
rbind(k$data$billName,
w$data$billName,
z$data$billName,
h$data$billName,
c$data$billName,
l$data$billName)
unique(rbind(k$data$billName,
w$data$billName,
z$data$billName,
h$data$billName,
c$data$billName,
l$data$billName))
k$data$billName
w$data$billName
c(k$data$billName,
w$data$billName,
z$data$billName,
h$data$billName,
c$data$billName,
l$data$billName)
unique(c(k$data$billName,
w$data$billName,
z$data$billName,
h$data$billName,
c$data$billName,
l$data$billName))
uni_legislation<- unique(c(k$data$billName,
w$data$billName,
z$data$billName,
h$data$billName,
c$data$billName,
l$data$billName))
df <- new$data
df$billName
df
df$billProposer
has_huang <- stringr::str_detect(df$billProposer, "高金素梅|伍麗華|鄭天財|黃仁|陳瑩|盧縣一")
has_huang
df[has_huang, ]
k <- df[str_detect(df$billProposer, "高金素梅"),]
w <- df[str_detect(df$billProposer, "伍麗華"),]
z <- df[str_detect(df$billProposer, "鄭天財"),]
h <- df[str_detect(df$billProposer, "黃仁"),]
c <- df[str_detect(df$billProposer, "陳瑩"),]
l <- df[str_detect(df$billProposer, "盧縣一"),]
k
w
z
w
h
c
l
c <- get_bills(proposer = "陳瑩",start_date = 1130201,end_date = 1131227, verbose = FALSE)
c
get_bills_2
new <- get_bills_2(term = 11)
k <- df[str_detect(df$billProposer, "高金素梅"),]
df <- new$data
k <- df[str_detect(df$billProposer, "高金素梅"),]
k <- df[str_detect(df$billProposer, "高金素梅"),]
w <- df[str_detect(df$billProposer, "伍麗華"),]
h <- df[str_detect(df$billProposer, "黃仁"),]
c <- df[str_detect(df$billProposer, "陳瑩"),]
l <- df[str_detect(df$billProposer, "盧縣一"),]
c
df$billProposer
c <- df[str_detect(df$billProposer, "陳"),]
c
h <- df[str_detect(df$billProposer, "黃  仁"),]
h
c <- df[str_detect(df$billProposer, "陳　瑩"),]
c
l <- df[str_detect(df$billProposer, "盧縣一"),]
l
c <- df[str_detect(df$billProposer, "陳　瑩|陳瑩"),]
c
l <- df[str_detect(df$billProposer, "盧縣一"),]
l <- df[str_detect(df$billProposer, "盧"),]
l
l <- df[str_detect(df$billProposer, "盧縣一"),]
l
h <- df[str_detect(df$billProposer, "黃  仁"),]
h
h <- df[str_detect(df$billProposer, "黃"),]
h
h <- df[str_detect(df$billProposer, "黃　仁|黃仁"),]
h
k <- df[str_detect(df$billProposer, "高金素梅"),]
w <- df[str_detect(df$billProposer, "伍麗華"),]
z <- df[str_detect(df$billProposer, "鄭天財"),]
h <- df[str_detect(df$billProposer, "黃　仁|黃仁"),]
c <- df[str_detect(df$billProposer, "陳　瑩|陳瑩"),]
l <- df[str_detect(df$billProposer, "盧縣一"),]
k
k["name"] <- "高金素梅"
w["name"] <- "伍麗華"
z["name"] <- "黃仁"
h["name"] <- "陳瑩"
new <- get_bills_2(term = 11)
df <- new$data
k <- df[str_detect(df$billProposer, "高金素梅"),]
k["name"] <- "高金素梅"
k["party"] <- "None"
w <- df[str_detect(df$billProposer, "伍麗華"),]
w["name"] <- "伍麗華"
w["party"] <- "DPP"
z <- df[str_detect(df$billProposer, "鄭天財"),]
z["name"] <- "鄭天財"
z["party"] <- "KMT"
h <- df[str_detect(df$billProposer, "黃　仁|黃仁"),]
h["name"] <- "黃仁"
h["party"] <- "KMT"
c <- df[str_detect(df$billProposer, "陳　瑩|陳瑩"),]
c["name"] <- "陳瑩"
c["party"] <- "DPP"
l <- df[str_detect(df$billProposer, "盧縣一"),]
l["name"] <- "盧縣一"
l["party"] <- "KMT"
rbind(k, w, z, h, c, l)
df <- rbind(k, w, z, h, c, l)
table(df$name)
t(table(df$name))
(table(df$name)
table(df$name)
table(df$name)
df <- rbind(k, w, z, h, c, l)
name_counts <- as.data.frame(table(df$name))
colnames(name_counts) <- c("Name", "Count")
# 繪製長條圖
ggplot2::ggplot(name_counts, aes(x = reorder(Name, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Distribution of Names",
x = "Name",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 載入必要套件
library(ggplot2)
library(showtext)
# 載入中文字體
showtext_auto()
df <- rbind(k, w, z, h, c, l)
name_counts <- as.data.frame(table(df$name))
colnames(name_counts) <- c("Name", "Count")
# 繪製長條圖
ggplot2::ggplot(name_counts, aes(x = reorder(Name, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Distribution of Names",
x = "Name",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df
df
df["text"] <- c()
df["text"]
df
df["text"] <- ""
df["text"]
seq_len(df)
seq_len(df)
df
seq_len(df)
seq_len(df$term)
seq_along(df$term)
seq_along(df$term[1:5,])
seq_along(df$term[1:5,])
df$term[1:5,]
seq_along(df[1:5,])
df$pdfUrl
for (i in seq_along(df[1:5,])) {
df[i, "text"] <- pdf_text(df$pdfUrl[i])
}
library(pdftools)
for (i in seq_along(df[1:5,])) {
df[i, "text"] <- pdf_text(df$pdfUrl[i])
}
df[1:5,]
library(pdftools)
df[i, "text"] <- ""
for (i in seq_along(df[1:5,])) {
df[1:5,][i, "text"] <- pdf_text(df[1:5,]$pdfUrl[i])
}
for (i in seq_along(df[1:5,])) {
df[i, "text"] <- pdf_text(df[1:5,]$pdfUrl[i])
}
df$text
df[1:5,]$pdfUrl[i]
pdf_text(df[1:5,]$pdfUrl[i])
df
# 增加錯誤處理的版本
df$text <- mclapply(df$pdfUrl, function(url) {
tryCatch({
pdf_text(url)
}, error = function(e) {
warning(sprintf("處理 %s 時出錯: %s", url, e$message))
return(NA)
})
}, mc.cores = num_cores) %>% unlist()
# 增加錯誤處理的版本
df$text <- mclapply(df$pdfUrl, function(url) {
tryCatch({
pdf_text(url)
}, error = function(e) {
warning(sprintf("處理 %s 時出錯: %s", url, e$message))
return(NA)
})
}, mc.cores = 3) %>% unlist()
# 取前10筆數據測試
df_test <- df[1:10,]
library(lubridate)
start_time <- Sys.time()
df$text <- mclapply(df$pdfUrl, function(url) {
counter <<- counter + 1
# 計算預估剩餘時間
elapsed <- as.numeric(Sys.time() - start_time, units="secs")
est_total <- (elapsed/counter) * total_files
est_remaining <- est_total - elapsed
cat(sprintf("\r進度: %d/%d (%.1f%%) - 預估剩餘時間: %.1f 分鐘",
counter, total_files,
counter/total_files*100,
est_remaining/60))
tryCatch({
pdf_text(url)
}, error = function(e) {
warning(sprintf("\n處理 %s 時出錯: %s", url, e$message))
return(NA)
})
}, mc.cores = num_cores) %>% unlist()
df$text <- mclapply(df$pdfUrl, function(url) {
counter <<- counter + 1
# 計算預估剩餘時間
elapsed <- as.numeric(Sys.time() - start_time, units="secs")
est_total <- (elapsed/counter) * total_files
est_remaining <- est_total - elapsed
cat(sprintf("\r進度: %d/%d (%.1f%%) - 預估剩餘時間: %.1f 分鐘",
counter, total_files,
counter/total_files*100,
est_remaining/60))
tryCatch({
pdf_text(url)
}, error = function(e) {
warning(sprintf("\n處理 %s 時出錯: %s", url, e$message))
return(NA)
})
}, mc.cores = 2) %>% unlist()
df_test$text <- lapply(df_test$pdfUrl, pdf_text) %>% unlist()
lapply(df_test$pdfUrl, pdf_text)
lapply(df_test$pdfUrl, pdf_text)[1]
# 繪製長條圖
ggplot2::ggplot(name_counts, aes(x = reorder(Name, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Distribution of Names",
x = "Name",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
for (i in seq_along(df_test)) {
df_test[i, "text"] <- pdf_text(df_test$pdfUrl[i])
}
# 取前10筆數據測試
df_test <- df[1:10,]
df_test$pdfUrl[i]
seq_along(df_test)
for (i in seq_along(df_test$term)) {
df_test[i, "text"] <- pdf_text(df_test$pdfUrl[i])
}
seq_along(df_test$term)
for (i in seq_along(df_test$term)) {
df_test[i, "text"] <- pdf_text(df_test$pdfUrl[i])
}
pdf_text(df_test$pdfUrl[i])
unlist(pdf_text(df_test$pdfUrl[i]))
# 方法1：使用 paste() 合併
process_pdf <- function(url, index, total) {
cat(sprintf("\r處理進度: %d/%d (%.1f%%)", index, total, index/total*100))
tryCatch({
# 讀取 PDF 並自動合併所有頁面
text <- pdf_text(url) %>%
paste(collapse = " ") %>%    # 合併所有頁面，用空格分隔
gsub("\n+", " ", .) %>%     # 替換多個換行為空格
trimws()                     # 清理多餘空格
return(text)
}, error = function(e) {
warning(sprintf("\n處理第 %d 個文件時出錯: %s", index, e$message))
return(NA_character_)
})
}
total_files <- nrow(df_test)
df_test$text <- character(total_files)
for(i in seq_len(total_files)) {
df_test$text[i] <- process_pdf(df_test$pdfUrl[i], i, total_files)
}
df_test$text
df_test
df_test[1,]$text
build_site()
build_site()
build_site()
build_site()
new <- get_bills_2(term = 11, verbose= FALSE)
build_site()
deploy_to_branch()
# 取前10筆數據測試
df_test <- df[1:10,]
total_files <- nrow(df_test)
total_files
df_test$text <- character(total_files)
df_test$text
for(i in seq_len(total_files)) {
df_test$text[i] <- process_pdf(df_test$pdfUrl[i], i, total_files)
}
press.token <- tokens(df_test$text,
remove_punct = FALSE,
remove_symbols = FALSE,
remove_numbers = FALSE,
remove_url = FALSE,
remove_separators = FALSE,
split_hyphens = FALSE,
include_docvars = TRUE,
padding = FALSE)
press.token
dfm_df <- dfm(press.token)
dfm_df
setwd("~/Dropbox/messages-for-pork-barrel/dic")
text <- readLines("user_dict.txt", encoding = "UTF-8")
getwd()
text <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/user_dict.txt", encoding = "UTF-8")
text
Domestic_Macroeconomic_Issues <- c("人口", "國庫", "物價", "經濟循環", "經濟政務", "標準", "談判",
"經濟政策", "經濟發展", "經濟建設", "財政政務", "財政政策", "貨幣", "通貨膨脹", "進口管制",  "賦稅",
"對外投資", "對外經濟關係",  "產業政策", "產業發展", "中小企業","公共建設", "加工出口", "工業")
Civil_Rights_Minority_Issues_and_Civil_Liberties <- c("人權保障", "性別歧視", "國有財產",
"同性戀", "政治迫害", "原住民族","地方語言",  "族群意識","客家事務", "婦女受害者", "原民權利",
"司法改革", "原民事務", "原民政策", "原民財經")
Health <- c("全民健保", "公共衛生", "動物疾病", "國民健康", "疾病管制", "檢驗", "管制藥品", "原民衛福", "全民健保", "衛福政務",
"肉品衛生", "食品管理", "衛福其他", "食品衛生", "醫政", "防檢檢疫", "體檢","中醫藥", "毒物管理", "安全衛生", "衛福政策")
Agriculture <- c("農保", "農地", "農業人口", "農業政務", "農業政策", "農民",
"農民輔導", "農漁金融", "農產品價格", "農產運銷", "農糧",  "畜牧", "畜牧業")
Labor_and_Employment <- c("人力資源", "人力運用", "休假", "加班", "勞動其他", "退休金", "退職", "退輔", "退休撫卹",
"勞動基準", "勞動政務", "勞動政策", "勞工權益", "勞工福利", "勞資關係", "外國人",
"外國人投資", "就業", "工作時間", "年金保險", "待遇福利", "流動勞工", "薪資",
"薪資調整", "罷工", "工廠管理", "工程管理")
Education <- c("中等教育", "人才培育", "人才外流", "大學", "學前教育", "學生事務",  "教師", "國民教育", "原民文教",
"學生活動", "師範教育", "技職教育", "技術教育", "特殊教育", "社會教育", "職業教育", "原住民族教育",
"體育", "高等教育", "教育人員", "教育其他", "教育政務", "教育政策", "青年輔導","中研院", "建教合作")
Environment <- c("噪音振動", "土地品質", "土壤污染", "地層下陷", "大氣污染",
"大氣空氣", "太陽能", "環境影響評估", "環境政務", "環境政策", "環境衛生",
"環境評估", "空氣污染", "空氣污染防治", "消防防災", "空氣污染防治", "空氣污染防治", "環境政務",
"環境影響評估", "環境政策", "環境衛生", "生態保育", "廢棄物", "廢氣管制")
Energy <- c("再生能源", "天然氣", "核能政策", "核能發電廠", "火力發電", "火力發電廠",
"煤", "能源", "能源政策", "電力", "電力公司", "電力生產", "電動車輛", "核能", "電費")
Immigration_and_Refugee_Issues <- c("移民", "外國人", "外國人投資")
Transportation <- c("交通政務", "交通政策", "公路", "加工出口", "港埠", "海運",
"空中勤務", "空運", "運輸規劃", "鐵路", "鐵路建設", "鐵路運輸", "網際網路", "交通其他")
Law_Crime_and_Family_Issues <- c("刑事", "司法其他", "司法改革", "司法政策", "大法官", "利益迴避",
"憲政改革", "憲政議題", "憲政運作", "憲法", "憲法修正", "引渡","檢察事務",
"司法行政", "夫妻", "婚姻", "法務其他", "法務政務", "法律事務", "特赦", "民事",
"法院", "犯罪被害人保護", "矯正事務", "行政法", "訴訟法", "調查工作", "調查巡察")
Social_Welfare <- c("社政", "福利服務")
Community_Development_and_Housing_Issues <- c("社區", "都市計畫", "社會發展", "營建")
Banking_Finance_and_Domestic_Commerce <- c("保險", "公平交易", "商業", "投資","保護業務", "財金其他",
"投資業務", "證券市場", "證券期貨", "金融", "銀行", "消費保護")
Defense <- c("作戰訓練", "兵役政策", "國防", "國防主計", "國防人事", "國防其他", "海軍",
"役政", "徵兵", "國防政務", "國防政策", "戰爭", "戰略", "軍事審判", "軍事演習",
"軍事科學", "軍人退休俸", "軍備", "軍醫", "飛行員","空中勤務")
Space_Science_Technology_and_Communications_Foreign_Trade <- c("科學園區", "科技交流",
"科技政務", "科技政策", "科技研發", "電信", "技術移轉" , "智慧財產")
Foreign_Trade <- c("關務", "經濟合作", "經貿其他", "貿易協定", "貿易政策", "自由貿易區", "對外貿易")
International_Affairs_and_Foreign_Aid <- c("亞太", "亞西非洲", "僑務", "僑民文教", "中美洲",
"僑民經濟", "北美", "外交其他",
"外交政務", "外交政策", "外交關係", "國際協定", "國際合作", "國際文教", "國際環保",
"國際環境保護", "國際組織", "國際經濟", "國際貿易", "國際關係", "歐洲", "歐洲聯盟",
"國際新聞", "入出國", "入出境管理")
Government_Operations <- c("主權", "主計事務", "人事事務", "總統選舉", "締約權",
"總統職權", "總統選舉", "國有財產", "國民身分證", "內政其他", "內政政策",
"總統選罷", "總統其他", "戶籍", "人民團體", "內政政務", "監察行政",
"黨政關係", "人事其他", "人事行政", "任免升遷", "公共政策", "公務員俸給", "戶政","遴選制度",
"公務員福利", "公務員退休", "公教人員出國", "公民投票", "公營事業", "公立學校",
"國會", "國會決議", "國家元首", "國家安全", "國家政策", "國發政務", "國發政策", "訓練進修",
"外匯", "政務官", "政府出版", "政府採購", "政府施政", "政府組織", "政府資訊",
"政府體制", "政治作戰", "政治獻金", "政治革新", "政治體制", "政風工作", "文官制度",
"普查抽樣", "會計", "民意調查", "決算", "監察院", "研究發展", "組織編制", "經濟建設", "遴選制度",
"考核獎懲", "考試分發", "考試制度", "考試行政", "行政協調", "行政責任", "行政首長", "民政",
"財產申報", "資源分配", "質詢權", "選務", "選舉", "領務", "警政", "警察", "總統禮遇",
"領海", "預算", "任免升遷", "黨政關係",  "立委選罷", "立法",  "審計","蒙藏事務",
"立法其他", "立法委員", "立法行政", "立法院", "立院職權", "糾正案",  "彈劾糾舉", "地政")
Public_Lands_Water_Management_and_Territorial_Issues <- c("國土計畫", "水利", "領土",
"水土保持", "水源水質", "水資源", "污染防治", "土地使用", "原民土地", "供水",
"海域安全", "海洋事務", "海洋政策", "海洋文教", "海洋科研", "海洋資源", "漁業",
"漁業權","林業", "漁業管理", "漁產品", "漁船", "礦業地質", "藥政", "領海")
Cultural_Policy_Issues <- c("體育", "文化交流", "文化傳播", "文化其他", "文化政務", "紀念館",
"文化政策",  "客家傳播", "客家政策", "客家文教", "客家社經", "文化設施", "文化資產",
"文創發展", "母語教學", "社區", "藝術發展", "觀光", "電影", "電視廣播", "文化認同", "語言")
Other <- c("和平主義", "基金", "臺獀", "強權政治", "檔案管理", "臺獀", "談判", "國內新聞",
"郵政", "出版", "傳播媒體", "全國統計", "臺獨", "氣象")
China <- c( "兩岸政務", "兩岸文教", "兩岸法政", "兩岸經貿", "港澳事務", "大陸協商", "大陸政策",  "中共研究", "中國問題")
China
China
text
text <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/user_dict.txt", encoding = "UTF-8")
text
list(text)
text
c(
"八二三砲戰", "托育", "眷村改建", "遷村",
"九二一大地震", "金融卡", "日間托老", "長照",
"地震", "偏鄉"
)
dput(text)
dtm <- corpus(df_test$text) %>%
tokens(
remove_punct = TRUE,
remove_numbers = FALSE,
remove_url = TRUE,
remove_separators = TRUE,
split_hyphens = FALSE
) %>%
tokens_select(pattern = dput(text), selection = "keep") %>%
dfm()
dtm
freq <- textstat_frequency(dtm)
freq
prop_dtm <- dfm_weight(dtm, scheme = "prop")
prop_dtm
df_test
prop_dtm
df_test$name
textplot_wordcloud(dtm, min_freq = 2, max_words = 10)
cooc <- fcm(dtm)
cooc
doc_stats <- textstat_summary(dtm)
doc_stats
tfidf <- dfm_tfidf(dtm)
tfidf
docfreq <- docfreq(dtm)
sort(docfreq, decreasing = TRUE)
docfreq
text
str_trim(text)
dput(str_trim(text))
usethis::use_data(dput(str_trim(text)))
setwd("~/Dropbox/My Packages/legisTaiwan")
text <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/user_dict.txt", encoding = "UTF-8")
text <- str_trim(text)
text <- dput(str_trim(text))
text
text <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/user_dict.txt", encoding = "UTF-8")
text <- dput(str_trim(text))
text
dput
usethis::use_data(text)
text <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/user_dict.txt", encoding = "UTF-8")
legis_keywords <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/user_dict.txt", encoding = "UTF-8")
usethis::use_data(legis_keywords)
load("~/Dropbox/My Packages/legisTaiwan/data/legis_keywords.rda")
stopwords <- readLines("/Users/yenchiehliao/Dropbox/messages-for-pork-barrel/dic/stopwords.txt", encoding = "UTF-8")
usethis::use_data(stopwords)
stopwords
dtm <- corpus(df_test$text) %>%
tokens(
remove_punct = TRUE,
remove_numbers = FALSE,
remove_url = TRUE,
remove_separators = TRUE,
split_hyphens = FALSE
) %>%
tokens_select(pattern = dput(text), selection = "keep") %>%
dfm()
dtm
roxygen2::roxygenize()
build_site()
build_site()
build_site()
build_site()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
build_site()
build_site()
build_site()
deploy_to_branch()
build_site()
devtools::load_all(".")
build_site()
build_site()
build_site()
deploy_to_branch()
