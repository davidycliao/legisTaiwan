mock_resp <- structure(
list(
status_code = 200,
content = charToRaw(mock_json)
),
class = "response"
)
# Mock httr::GET
mockery::stub(get_ly_committee_meets, "httr::GET", mock_resp)
# Test the function
result <- get_ly_committee_meets(committee_id = 1, show_progress = FALSE)
# Check structure
expect_type(result, "list")
expect_named(result, c("metadata", "meetings"))
# Check metadata
expect_equal(result$metadata$total, 1)
expect_equal(result$metadata$total_page, 1)
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 20)
# Check meetings data
expect_s3_class(result$meetings, "data.frame")
expect_equal(nrow(result$meetings), 1)
expect_equal(result$meetings$會議名稱[1], "測試委員會")
expect_equal(result$meetings$會議代碼[1], "TEST001")
expect_equal(result$meetings$地點[1], "立法院紅樓")
})
expect_error(get_ly_committee_meets(), "committee_id is required")
expect_error(get_ly_committee_meets("abc"), "committee_id must be numeric")
test_that("get_ly_committee_meets handles input validation", {
expect_error(get_ly_committee_meets(), "committee_id is required")
expect_error(get_ly_committee_meets("abc"), "committee_id must be numeric")
})
test_that("get_ly_committee_meets handles API errors", {
# Mock error response
mock_error_resp <- structure(
list(status_code = 404),
class = "response"
)
mockery::stub(get_ly_committee_meets, "httr::GET", mock_error_resp)
expect_error(
get_ly_committee_meets(committee_id = 1, show_progress = FALSE),
"API request failed with status code: 404"
)
})
test_that("get_ly_committee_meets handles API errors", {
# Mock error response
mock_error_resp <- structure(
list(status_code = 404),
class = "response"
)
mockery::stub(get_ly_committee_meets, "httr::GET", mock_error_resp)
expect_error(
get_ly_committee_meets(committee_id = 1, show_progress = FALSE),
"API request failed with status code: 404"
)
})
roxygen2::roxygenize()
test_that("get_ly_committee_meets handles input validation", {
expect_error(get_ly_committee_meets(), "committee_id is required")
expect_error(get_ly_committee_meets("abc"), "committee_id must be numeric")
})
})
roxygen2::roxygenise()
roxygen2::roxygenise()
library(package)
library(pkgdown)
build_site()
bills <- get_ly_bills(
bill_type = "行政命令(層級)",
show_progress = TRUE
)
get_ly_committee_meets
??get_ly_committee_meets
roxygen2::roxygenize()
get_ly_committee_meets
build_site()
deploy_to_branch()
build_site()
roxygen2::roxygenize()
roxygen2::roxygenize()
build_site()
build_site()
pkgdown::preview_site(path='reference/get_caucus_meetings.html')
pkgdown::preview_site(path='reference/get_caucus_meetings.html')
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
# 測試基本呼叫
result <- get_ly_committees_type(show_progress = FALSE)
# 測試基本呼叫
result <- get_ly_committees_type(show_progress = FALSE)
library(legisTaiwan)
# 測試基本呼叫
result <- get_ly_committees_type(show_progress = FALSE)
# 檢查回傳值結構
expect_type(result, "list")
library(testtha)
library(testthat)
# 檢查回傳值結構
expect_type(result, "list")
texpect_named(result, c("metadata", "committees"))
texpect_named
# 檢查資料框結構
expect_s3_class(result$committees, "data.frame")
# 檢查資料框結構
expect_s3_class(result$committees, "data.frame")
expect_named(result$committees, c("代號", "名稱", "職掌", "類別"))
test_that("get_ly_committees_type basic functionality", {
# 測試基本呼叫
result <- get_ly_committees_type(show_progress = FALSE)
# 檢查回傳值結構
expect_type(result, "list")
# 檢查資料框結構
expect_s3_class(result$committees, "data.frame")
expect_named(result$committees, c("代號", "名稱", "職掌", "類別"))
})
test_that("get_ly_committees_type handles parameters correctly", {
# 測試特定參數
result <- get_ly_committees_type(
page = 1,
per_page = 10,
type = "常設委員會",
show_progress = FALSE
)
# 檢查分頁設定
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 10)
# 檢查委員會類別
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
})
# 測試特定參數
result <- get_ly_committees_type(
page = 1,
per_page = 10,
type = "常設委員會",
show_progress = FALSE
)
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 10)
esult$metadata$per_page
result$metadata$per_page
expect_equal(result$metadata$per_page, 100)
# 檢查委員會類別
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
test_that("get_ly_committees_type handles parameters correctly", {
# 測試特定參數
result <- get_ly_committees_type(
page = 1,
per_page = 10,
type = "常設委員會",
show_progress = FALSE
)
# 檢查分頁設定
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 100)
# 檢查委員會類別
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
})
utils::packageVersion("legisTaiwan")
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
test_that("get_ly_committees_type handles parameters correctly", {
# 測試特定參數
result <- get_ly_committees_type(
page = 1,
per_page = 10,
type = "常設委員會",
show_progress = FALSE
)
# 檢查分頁設定
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 100)
# 檢查委員會類別
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
})
test_that("get_ly_committees_type error handling", {
# 測試錯誤參數
expect_error(
get_ly_committees_type(page = "invalid"),
"page"
)
expect_error(
get_ly_committees_type(per_page = -1),
"per_page"
)
})
# 測試錯誤參數
expect_error(
get_ly_committees_type(page = "invalid"),
"page"
)
expect_error(
get_ly_committees_type(per_page = -1),
"per_page"
)
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
test_that("get_ly_committees_type basic functionality", {
# 測試基本呼叫
result <- get_ly_committees_type(show_progress = FALSE)
# 檢查回傳值結構
expect_type(result, "list")
# 檢查資料框結構
expect_s3_class(result$committees, "data.frame")
expect_named(result$committees, c("代號", "名稱", "職掌", "類別"))
})
test_that("get_ly_committees_type handles parameters correctly", {
# 測試特定參數
result <- get_ly_committees_type(
page = 1,
per_page = 10,
type = "常設委員會",
show_progress = FALSE
)
# 檢查分頁設定
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 100)
# 檢查委員會類別
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
})
test_that("get_ly_committees_type error handling", {
# 測試錯誤參數
expect_error(
get_ly_committees_type(page = "invalid"),
"page"
)
})
test_that("get_ly_committees_type handles parameters correctly", {
# 測試特定參數
result <- get_ly_committees_type(
page = 1,
per_page = 10,
type = "常設委員會",
show_progress = FALSE
)
# 檢查分頁設定
expect_equal(result$metadata$current_page, 1)
expect_equal(result$metadata$per_page, 100)
# 檢查委員會類別
if(nrow(result$committees) > 0) {
expect_equal(unique(result$committees$類別), "常設委員會")
}
})
expect_error(
get_ly_committees_type(page = "invalid"),
"page"
)
test_that("get_ly_committees_type error handling", {
# 測試錯誤參數
expect_error(
get_ly_committees_type(page = "invalid", show_progress = FALSE),
"API request failed with status code: 500"
)
expect_error(
get_ly_committees_type(per_page = -1, show_progress = FALSE),
"API request failed with status code: 500"
)
})
expect_error(
get_ly_committees_type(page = "invalid", show_progress = FALSE),
"API request failed with status code: 500"
)
expect_error(
get_ly_committees_type(per_page = -1, show_progress = FALSE),
"API request failed with status code: 500"
)
expect_error(
get_ly_legislator_detail(term = 9, name = 123, show_progress = FALSE),
"name must be character"
)
# 測試缺少必要參數
expect_error(
get_ly_legislator_detail(name = "王金平", show_progress = FALSE),
"term parameter is required"
)
expect_error(
get_ly_legislator_detail(term = 9, show_progress = FALSE),
"name parameter is required"
)
# 測試參數型別錯誤
expect_error(
get_ly_legislator_detail(term = "9", name = "王金平", show_progress = FALSE),
"term must be numeric"
)
expect_error(
get_ly_legislator_detail(term = 9, name = 123, show_progress = FALSE),
"name must be character"
)
test_that("parameter validation works", {
# 測試缺少必要參數
expect_error(
get_ly_legislator_detail(name = "王金平", show_progress = FALSE),
"term parameter is required"
)
expect_error(
get_ly_legislator_detail(term = 9, show_progress = FALSE),
"name parameter is required"
)
# 測試參數型別錯誤
expect_error(
get_ly_legislator_detail(term = "9", name = "王金平", show_progress = FALSE),
"term must be numeric"
)
expect_error(
get_ly_legislator_detail(term = 9, name = 123, show_progress = FALSE),
"name must be character"
)
})
# 測試基本功能
result <- get_ly_legislator_detail(
term = 9,
name = "王金平",
show_progress = FALSE
)
# 檢查回傳值結構
expect_type(result, "list")
# 檢查必要欄位
expected_fields <- c(
"term", "name", "party",
"areaName", "partyGroup"
)
for(field in expected_fields) {
expect_true(
field %in% names(result),
info = sprintf("Field '%s' should exist in result", field)
)
}
# 檢查資料內容
expect_equal(result$term, 9)
expect_equal(result$name, "王金平")
test_that("basic functionality works", {
# 測試基本功能
result <- get_ly_legislator_detail(
term = 9,
name = "王金平",
show_progress = FALSE
)
# 檢查回傳值結構
expect_type(result, "list")
# 檢查必要欄位
expected_fields <- c(
"term", "name", "party",
"areaName", "partyGroup"
)
for(field in expected_fields) {
expect_true(
field %in% names(result),
info = sprintf("Field '%s' should exist in result", field)
)
}
# 檢查資料內容
expect_equal(result$term, 9)
expect_equal(result$name, "王金平")
})
test_that("invalid term/name combination returns error", {
expect_error(
get_ly_legislator_detail(
term = 999,
name = "不存在的立委",
show_progress = FALSE
),
"API request failed with status code: "
)
})
library(legisTaiwan)
library(testthat)
library(testthat)
build_site()
library(pkgdown)
build_site()
# 在你的套件目錄下執行
tools::dependsOnPkgs("legisTaiwan")
devtools::check_man()  # 檢查文件
devtools::check()      # 完整檢查
readLines("NAMESPACE")
# 在 R console 中執行
files <- list.files(pattern = "\\.R$", path = "R", full.names = TRUE, recursive = TRUE)
for(file in files) {
lines <- readLines(file)
matches <- grep("accel|type_sum", lines, value = TRUE)
if(length(matches) > 0) {
cat("\nFile:", file, "\n")
print(matches)
}
}
devtools::load_all(".")
get_ly_committees_type()
x <- get_ly_committees_type()
roxygen2::roxygenise()
roxygen2::roxygenise()
build_site()
deploy_to_branch()
build_site()
deploy_to_branch()
------
review_session_info()
library(legisTaiwan)
review_session_info()
review_session_info
?review_session_info
review_session_info(7)
get_variable_info()
review_session_info(7)
review_session_info <- function(term) {
# Input validation
if(missing(term)) {
stop("Term parameter is required")
}
attempt::stop_if_not(website_availability2(),
msg = "API connection error. Please check your internet connection.")
attempt::stop_if(term, is.null,
msg = "Term cannot be NULL. Please provide a valid term number (1-11).")
attempt::stop_if_not(term %in% 1:11,
msg = paste("Invalid term:", term,
"\nPlease provide a term number between 1 and 11."))
# Construct URL
url <- sprintf("https://npl.ly.gov.tw/do/www/appDate?status=0&expire=%02d&startYear=0",
as.numeric(term))
tryCatch({
# Parse HTML
html_ <- rvest::html_nodes(rvest::read_html(url),
"*[class='section_wrapper']")
# Extract titles
title <- stringr::str_split_1(
rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_titlebar2']")
),
"\t\r"
)[1:2]
# Extract rows
odd_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_odd']")
)
even_rows <- rvest::html_text2(
rvest::html_nodes(html_, "[class='tt_listrow_even']")
)
# Process data
data <- lapply(
lapply(c(odd_rows, even_rows),
function(x) stringr::str_split_1(x, "\r\r")),
function(x) gsub("[[:space:]]", "", x)
)
# Create dataframe
df <- do.call(rbind, data)
colnames(df) <- title
return(tibble::as_tibble(df))
},
error = function(e) {
stop(paste("Error retrieving session information:", e$message))
})
}
review_session_info()
review_session_info(7)
library(roxygence)
roxygen2::roxygenise()
review_session_info(7)
review_session_info(7)
roxygen2::roxygenise()
review_session_info(7)
review_session_info(7)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
legislators_data <- get_legislators(term = 9)
legislators_data
roxygen2::roxygenise()
check_bill <- get_variable_info("get_bills")
check_bill
check_bill <- get_variable_info("get_caucus_meetings")
check_bill
check_caucus <- get_variable_info("get_caucus_meetings")
check_caucus
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
get_variable_info("get_speech_video")
get_speech_video("10")
get_speech_video(term = 11)
get_speech_video(term = 11, start_date = 110/10/1, end_date = 110/12/1)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(pkgdown )
build_site()
build_site()
build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
build_site()
deploy_to_branch()
